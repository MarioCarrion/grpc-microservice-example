// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: wearable/v1/wearable_service.proto

package wearablev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WearableService_BeatsPerMinute_FullMethodName          = "/wearable.v1.WearableService/BeatsPerMinute"
	WearableService_ConsumeBeatsPerMinute_FullMethodName   = "/wearable.v1.WearableService/ConsumeBeatsPerMinute"
	WearableService_CalculateBeatsPerMinute_FullMethodName = "/wearable.v1.WearableService/CalculateBeatsPerMinute"
)

// WearableServiceClient is the client API for WearableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WearableServiceClient interface {
	BeatsPerMinute(ctx context.Context, in *BeatsPerMinuteRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BeatsPerMinuteResponse], error)
	ConsumeBeatsPerMinute(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ConsumeBeatsPerMinuteRequest, ConsumeBeatsPerMinuteResponse], error)
	CalculateBeatsPerMinute(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CalculateBeatsPerMinuteRequest, CalculateBeatsPerMinuteResponse], error)
}

type wearableServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWearableServiceClient(cc grpc.ClientConnInterface) WearableServiceClient {
	return &wearableServiceClient{cc}
}

func (c *wearableServiceClient) BeatsPerMinute(ctx context.Context, in *BeatsPerMinuteRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BeatsPerMinuteResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WearableService_ServiceDesc.Streams[0], WearableService_BeatsPerMinute_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BeatsPerMinuteRequest, BeatsPerMinuteResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WearableService_BeatsPerMinuteClient = grpc.ServerStreamingClient[BeatsPerMinuteResponse]

func (c *wearableServiceClient) ConsumeBeatsPerMinute(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ConsumeBeatsPerMinuteRequest, ConsumeBeatsPerMinuteResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WearableService_ServiceDesc.Streams[1], WearableService_ConsumeBeatsPerMinute_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ConsumeBeatsPerMinuteRequest, ConsumeBeatsPerMinuteResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WearableService_ConsumeBeatsPerMinuteClient = grpc.ClientStreamingClient[ConsumeBeatsPerMinuteRequest, ConsumeBeatsPerMinuteResponse]

func (c *wearableServiceClient) CalculateBeatsPerMinute(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CalculateBeatsPerMinuteRequest, CalculateBeatsPerMinuteResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WearableService_ServiceDesc.Streams[2], WearableService_CalculateBeatsPerMinute_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CalculateBeatsPerMinuteRequest, CalculateBeatsPerMinuteResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WearableService_CalculateBeatsPerMinuteClient = grpc.BidiStreamingClient[CalculateBeatsPerMinuteRequest, CalculateBeatsPerMinuteResponse]

// WearableServiceServer is the server API for WearableService service.
// All implementations must embed UnimplementedWearableServiceServer
// for forward compatibility.
type WearableServiceServer interface {
	BeatsPerMinute(*BeatsPerMinuteRequest, grpc.ServerStreamingServer[BeatsPerMinuteResponse]) error
	ConsumeBeatsPerMinute(grpc.ClientStreamingServer[ConsumeBeatsPerMinuteRequest, ConsumeBeatsPerMinuteResponse]) error
	CalculateBeatsPerMinute(grpc.BidiStreamingServer[CalculateBeatsPerMinuteRequest, CalculateBeatsPerMinuteResponse]) error
	mustEmbedUnimplementedWearableServiceServer()
}

// UnimplementedWearableServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWearableServiceServer struct{}

func (UnimplementedWearableServiceServer) BeatsPerMinute(*BeatsPerMinuteRequest, grpc.ServerStreamingServer[BeatsPerMinuteResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BeatsPerMinute not implemented")
}
func (UnimplementedWearableServiceServer) ConsumeBeatsPerMinute(grpc.ClientStreamingServer[ConsumeBeatsPerMinuteRequest, ConsumeBeatsPerMinuteResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ConsumeBeatsPerMinute not implemented")
}
func (UnimplementedWearableServiceServer) CalculateBeatsPerMinute(grpc.BidiStreamingServer[CalculateBeatsPerMinuteRequest, CalculateBeatsPerMinuteResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CalculateBeatsPerMinute not implemented")
}
func (UnimplementedWearableServiceServer) mustEmbedUnimplementedWearableServiceServer() {}
func (UnimplementedWearableServiceServer) testEmbeddedByValue()                         {}

// UnsafeWearableServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WearableServiceServer will
// result in compilation errors.
type UnsafeWearableServiceServer interface {
	mustEmbedUnimplementedWearableServiceServer()
}

func RegisterWearableServiceServer(s grpc.ServiceRegistrar, srv WearableServiceServer) {
	// If the following call pancis, it indicates UnimplementedWearableServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WearableService_ServiceDesc, srv)
}

func _WearableService_BeatsPerMinute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BeatsPerMinuteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WearableServiceServer).BeatsPerMinute(m, &grpc.GenericServerStream[BeatsPerMinuteRequest, BeatsPerMinuteResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WearableService_BeatsPerMinuteServer = grpc.ServerStreamingServer[BeatsPerMinuteResponse]

func _WearableService_ConsumeBeatsPerMinute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WearableServiceServer).ConsumeBeatsPerMinute(&grpc.GenericServerStream[ConsumeBeatsPerMinuteRequest, ConsumeBeatsPerMinuteResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WearableService_ConsumeBeatsPerMinuteServer = grpc.ClientStreamingServer[ConsumeBeatsPerMinuteRequest, ConsumeBeatsPerMinuteResponse]

func _WearableService_CalculateBeatsPerMinute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WearableServiceServer).CalculateBeatsPerMinute(&grpc.GenericServerStream[CalculateBeatsPerMinuteRequest, CalculateBeatsPerMinuteResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WearableService_CalculateBeatsPerMinuteServer = grpc.BidiStreamingServer[CalculateBeatsPerMinuteRequest, CalculateBeatsPerMinuteResponse]

// WearableService_ServiceDesc is the grpc.ServiceDesc for WearableService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WearableService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wearable.v1.WearableService",
	HandlerType: (*WearableServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BeatsPerMinute",
			Handler:       _WearableService_BeatsPerMinute_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ConsumeBeatsPerMinute",
			Handler:       _WearableService_ConsumeBeatsPerMinute_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "CalculateBeatsPerMinute",
			Handler:       _WearableService_CalculateBeatsPerMinute_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "wearable/v1/wearable_service.proto",
}
