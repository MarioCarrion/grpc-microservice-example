# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: user/v1/user_service.proto

require 'google/protobuf'

require 'user/v1/user_pb'


descriptor_data = "\n\x1auser/v1/user_service.proto\x12\x07user.v1\x1a\x12user/v1/user.proto\"$\n\x0eGetUserRequest\x12\x12\n\x04uuid\x18\x01 \x01(\tR\x04uuid\"4\n\x0fGetUserResponse\x12!\n\x04user\x18\x01 \x01(\x0b\x32\r.user.v1.UserR\x04user2M\n\x0bUserService\x12>\n\x07GetUser\x12\x17.user.v1.GetUserRequest\x1a\x18.user.v1.GetUserResponse\"\x00\x42l\n\x0b\x63om.user.v1B\x10UserServiceProtoP\x01Z\x0euser/v1;userv1\xa2\x02\x03UXX\xaa\x02\x07User.V1\xca\x02\x07User\\V1\xe2\x02\x13User\\V1\\GPBMetadata\xea\x02\x08User::V1b\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError => e
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
    ["user.v1.User", "user/v1/user.proto"],
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module User
  module V1
    GetUserRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("user.v1.GetUserRequest").msgclass
    GetUserResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("user.v1.GetUserResponse").msgclass
  end
end
